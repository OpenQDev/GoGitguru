// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: repos_to_dependencies.sql

package database

import (
	"context"

	"github.com/lib/pq"
)

const batchInsertRepoDependencies = `-- name: BatchInsertRepoDependencies :exec
INSERT INTO repos_to_dependencies (url, dependency_id, first_use_data, last_use_data) VALUES (  
  unnest($1::varchar[]),  
  unnest($2::int[]),  
  unnest($3::bigint[]),  
  unnest($4::bigint[]) 
)
ON CONFLICT (url, dependency_id) DO UPDATE 
SET last_use_data = excluded.last_use_data, 
first_use_data = excluded.first_use_data
`

type BatchInsertRepoDependenciesParams struct {
	Column1 []string `json:"column_1"`
	Column2 []int32  `json:"column_2"`
	Column3 []int64  `json:"column_3"`
	Column4 []int64  `json:"column_4"`
}

func (q *Queries) BatchInsertRepoDependencies(ctx context.Context, arg BatchInsertRepoDependenciesParams) error {
	_, err := q.exec(ctx, q.batchInsertRepoDependenciesStmt, batchInsertRepoDependencies,
		pq.Array(arg.Column1),
		pq.Array(arg.Column2),
		pq.Array(arg.Column3),
		pq.Array(arg.Column4),
	)
	return err
}

const initializeRepoDependencies = `-- name: InitializeRepoDependencies :exec
INSERT INTO repos_to_dependencies (url, dependency_id) VALUES (  
 $1,  
  unnest($2::int[]) 
)
ON CONFLICT (url, dependency_id) DO NOTHING
`

type InitializeRepoDependenciesParams struct {
	Url     string  `json:"url"`
	Column2 []int32 `json:"column_2"`
}

func (q *Queries) InitializeRepoDependencies(ctx context.Context, arg InitializeRepoDependenciesParams) error {
	_, err := q.exec(ctx, q.initializeRepoDependenciesStmt, initializeRepoDependencies, arg.Url, pq.Array(arg.Column2))
	return err
}
