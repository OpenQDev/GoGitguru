// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: github_repos.sql

package database

import (
	"context"
	"database/sql"
)

const checkGithubRepoExists = `-- name: CheckGithubRepoExists :one
SELECT EXISTS(SELECT 1 FROM github_repos WHERE full_name = $1)
`

func (q *Queries) CheckGithubRepoExists(ctx context.Context, fullName string) (bool, error) {
	row := q.queryRow(ctx, q.checkGithubRepoExistsStmt, checkGithubRepoExists, fullName)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getGithubRepo = `-- name: GetGithubRepo :one
SELECT internal_id, github_rest_id, github_graphql_id, url, name, full_name, private, owner_login, owner_avatar_url, description, homepage, fork, forks_count, archived, disabled, license, language, stargazers_count, watchers_count, open_issues_count, has_issues, has_discussions, has_projects, created_at, updated_at, pushed_at, visibility, size, default_branch FROM github_repos WHERE full_name = $1
`

func (q *Queries) GetGithubRepo(ctx context.Context, fullName string) (GithubRepo, error) {
	row := q.queryRow(ctx, q.getGithubRepoStmt, getGithubRepo, fullName)
	var i GithubRepo
	err := row.Scan(
		&i.InternalID,
		&i.GithubRestID,
		&i.GithubGraphqlID,
		&i.Url,
		&i.Name,
		&i.FullName,
		&i.Private,
		&i.OwnerLogin,
		&i.OwnerAvatarUrl,
		&i.Description,
		&i.Homepage,
		&i.Fork,
		&i.ForksCount,
		&i.Archived,
		&i.Disabled,
		&i.License,
		&i.Language,
		&i.StargazersCount,
		&i.WatchersCount,
		&i.OpenIssuesCount,
		&i.HasIssues,
		&i.HasDiscussions,
		&i.HasProjects,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PushedAt,
		&i.Visibility,
		&i.Size,
		&i.DefaultBranch,
	)
	return i, err
}

const getGithubRepoByUrl = `-- name: GetGithubRepoByUrl :one
SELECT internal_id FROM github_repos WHERE url = $1
`

func (q *Queries) GetGithubRepoByUrl(ctx context.Context, url string) (int32, error) {
	row := q.queryRow(ctx, q.getGithubRepoByUrlStmt, getGithubRepoByUrl, url)
	var internal_id int32
	err := row.Scan(&internal_id)
	return internal_id, err
}

const insertGithubRepo = `-- name: InsertGithubRepo :one

INSERT INTO github_repos (
    github_rest_id,
    github_graphql_id,
    url,
    name,
    full_name,
    private,
    owner_login,
    owner_avatar_url,
    description,
    homepage,
    fork,
    forks_count,
    archived,
    disabled,
    license,
    language,
    stargazers_count,
    watchers_count,
    open_issues_count,
    has_issues,
    has_discussions,
    has_projects,
    created_at,
    updated_at,
    pushed_at,
    visibility,
    size,
    default_branch
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28
)
ON CONFLICT (github_rest_id) DO NOTHING
RETURNING internal_id, github_rest_id, github_graphql_id, url, name, full_name, private, owner_login, owner_avatar_url, description, homepage, fork, forks_count, archived, disabled, license, language, stargazers_count, watchers_count, open_issues_count, has_issues, has_discussions, has_projects, created_at, updated_at, pushed_at, visibility, size, default_branch
`

type InsertGithubRepoParams struct {
	GithubRestID    int32          `json:"github_rest_id"`
	GithubGraphqlID string         `json:"github_graphql_id"`
	Url             string         `json:"url"`
	Name            string         `json:"name"`
	FullName        string         `json:"full_name"`
	Private         sql.NullBool   `json:"private"`
	OwnerLogin      string         `json:"owner_login"`
	OwnerAvatarUrl  sql.NullString `json:"owner_avatar_url"`
	Description     sql.NullString `json:"description"`
	Homepage        sql.NullString `json:"homepage"`
	Fork            sql.NullBool   `json:"fork"`
	ForksCount      sql.NullInt32  `json:"forks_count"`
	Archived        sql.NullBool   `json:"archived"`
	Disabled        sql.NullBool   `json:"disabled"`
	License         sql.NullString `json:"license"`
	Language        sql.NullString `json:"language"`
	StargazersCount sql.NullInt32  `json:"stargazers_count"`
	WatchersCount   sql.NullInt32  `json:"watchers_count"`
	OpenIssuesCount sql.NullInt32  `json:"open_issues_count"`
	HasIssues       sql.NullBool   `json:"has_issues"`
	HasDiscussions  sql.NullBool   `json:"has_discussions"`
	HasProjects     sql.NullBool   `json:"has_projects"`
	CreatedAt       sql.NullInt32  `json:"created_at"`
	UpdatedAt       sql.NullInt32  `json:"updated_at"`
	PushedAt        sql.NullInt32  `json:"pushed_at"`
	Visibility      sql.NullString `json:"visibility"`
	Size            sql.NullInt32  `json:"size"`
	DefaultBranch   sql.NullString `json:"default_branch"`
}

func (q *Queries) InsertGithubRepo(ctx context.Context, arg InsertGithubRepoParams) (GithubRepo, error) {
	row := q.queryRow(ctx, q.insertGithubRepoStmt, insertGithubRepo,
		arg.GithubRestID,
		arg.GithubGraphqlID,
		arg.Url,
		arg.Name,
		arg.FullName,
		arg.Private,
		arg.OwnerLogin,
		arg.OwnerAvatarUrl,
		arg.Description,
		arg.Homepage,
		arg.Fork,
		arg.ForksCount,
		arg.Archived,
		arg.Disabled,
		arg.License,
		arg.Language,
		arg.StargazersCount,
		arg.WatchersCount,
		arg.OpenIssuesCount,
		arg.HasIssues,
		arg.HasDiscussions,
		arg.HasProjects,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.PushedAt,
		arg.Visibility,
		arg.Size,
		arg.DefaultBranch,
	)
	var i GithubRepo
	err := row.Scan(
		&i.InternalID,
		&i.GithubRestID,
		&i.GithubGraphqlID,
		&i.Url,
		&i.Name,
		&i.FullName,
		&i.Private,
		&i.OwnerLogin,
		&i.OwnerAvatarUrl,
		&i.Description,
		&i.Homepage,
		&i.Fork,
		&i.ForksCount,
		&i.Archived,
		&i.Disabled,
		&i.License,
		&i.Language,
		&i.StargazersCount,
		&i.WatchersCount,
		&i.OpenIssuesCount,
		&i.HasIssues,
		&i.HasDiscussions,
		&i.HasProjects,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PushedAt,
		&i.Visibility,
		&i.Size,
		&i.DefaultBranch,
	)
	return i, err
}
