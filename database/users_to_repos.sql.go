// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users_to_repos.sql

package database

import (
	"context"

	"github.com/lib/pq"
)

const upsertRepoToUserById = `-- name: UpsertRepoToUserById :exec
INSERT INTO users_to_repo_urls (url, user_id, first_commit_date, last_commit_date)
SELECT $1, unnest($2::int[]), unnest($3::bigint[]), unnest($4::bigint[])
ON CONFLICT (url, user_id) DO UPDATE
    SET last_commit_date = GREATEST(users_to_repo_urls.last_commit_date, EXCLUDED.last_commit_date),
    first_commit_date = LEAST(users_to_repo_urls.first_commit_date, EXCLUDED.first_commit_date)
    RETURNING url, user_id
`

type UpsertRepoToUserByIdParams struct {
	Url              string  `json:"url"`
	InternalIds      []int32 `json:"internal_ids"`
	FirstCommitDates []int64 `json:"first_commit_dates"`
	LastCommitDates  []int64 `json:"last_commit_dates"`
}

func (q *Queries) UpsertRepoToUserById(ctx context.Context, arg UpsertRepoToUserByIdParams) error {
	_, err := q.exec(ctx, q.upsertRepoToUserByIdStmt, upsertRepoToUserById,
		arg.Url,
		pq.Array(arg.InternalIds),
		pq.Array(arg.FirstCommitDates),
		pq.Array(arg.LastCommitDates),
	)
	return err
}
