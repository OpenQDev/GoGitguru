// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const checkGithubUserExists = `-- name: CheckGithubUserExists :one
SELECT internal_id FROM github_users WHERE login = $1
LIMIT 1
`

func (q *Queries) CheckGithubUserExists(ctx context.Context, login string) (int32, error) {
	row := q.queryRow(ctx, q.checkGithubUserExistsStmt, checkGithubUserExists, login)
	var internal_id int32
	err := row.Scan(&internal_id)
	return internal_id, err
}

const getGithubUser = `-- name: GetGithubUser :one
SELECT internal_id, github_rest_id, github_graphql_id, login, name, email, avatar_url, company, location, bio, blog, hireable, twitter_username, followers, following, type, created_at, updated_at FROM github_users WHERE login = $1
`

func (q *Queries) GetGithubUser(ctx context.Context, login string) (GithubUser, error) {
	row := q.queryRow(ctx, q.getGithubUserStmt, getGithubUser, login)
	var i GithubUser
	err := row.Scan(
		&i.InternalID,
		&i.GithubRestID,
		&i.GithubGraphqlID,
		&i.Login,
		&i.Name,
		&i.Email,
		&i.AvatarUrl,
		&i.Company,
		&i.Location,
		&i.Bio,
		&i.Blog,
		&i.Hireable,
		&i.TwitterUsername,
		&i.Followers,
		&i.Following,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGithubUserByCommitEmail = `-- name: GetGithubUserByCommitEmail :many
SELECT gu.internal_id, array_agg(DISTINCT gure.email)::text[] AS emails FROM github_users gu
INNER JOIN github_user_rest_id_author_emails gure
ON gu.github_rest_id = gure.rest_id
WHERE gure.email = ANY($1::TEXT[])
GROUP BY gu.internal_id
`

type GetGithubUserByCommitEmailRow struct {
	InternalID int32    `json:"internal_id"`
	Emails     []string `json:"emails"`
}

func (q *Queries) GetGithubUserByCommitEmail(ctx context.Context, userEmails []string) ([]GetGithubUserByCommitEmailRow, error) {
	rows, err := q.query(ctx, q.getGithubUserByCommitEmailStmt, getGithubUserByCommitEmail, pq.Array(userEmails))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGithubUserByCommitEmailRow
	for rows.Next() {
		var i GetGithubUserByCommitEmailRow
		if err := rows.Scan(&i.InternalID, pq.Array(&i.Emails)); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupOfEmails = `-- name: GetGroupOfEmails :one
SELECT github_rest_id FROM github_users WHERE github_rest_id = ANY($1::INT[])
`

func (q *Queries) GetGroupOfEmails(ctx context.Context, dollar_1 []int32) (int32, error) {
	row := q.queryRow(ctx, q.getGroupOfEmailsStmt, getGroupOfEmails, pq.Array(dollar_1))
	var github_rest_id int32
	err := row.Scan(&github_rest_id)
	return github_rest_id, err
}

const insertUser = `-- name: InsertUser :one

INSERT INTO github_users (
    github_rest_id,
    github_graphql_id,
    login,
    name,
    email,
    avatar_url,
    company,
    location,
    bio,
    blog,
    hireable,
    twitter_username,
    followers,
    following,
    type,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17
)
RETURNING internal_id
`

type InsertUserParams struct {
	GithubRestID    int32          `json:"github_rest_id"`
	GithubGraphqlID string         `json:"github_graphql_id"`
	Login           string         `json:"login"`
	Name            sql.NullString `json:"name"`
	Email           sql.NullString `json:"email"`
	AvatarUrl       sql.NullString `json:"avatar_url"`
	Company         sql.NullString `json:"company"`
	Location        sql.NullString `json:"location"`
	Bio             sql.NullString `json:"bio"`
	Blog            sql.NullString `json:"blog"`
	Hireable        sql.NullBool   `json:"hireable"`
	TwitterUsername sql.NullString `json:"twitter_username"`
	Followers       sql.NullInt32  `json:"followers"`
	Following       sql.NullInt32  `json:"following"`
	Type            string         `json:"type"`
	CreatedAt       sql.NullTime   `json:"created_at"`
	UpdatedAt       sql.NullTime   `json:"updated_at"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (int32, error) {
	row := q.queryRow(ctx, q.insertUserStmt, insertUser,
		arg.GithubRestID,
		arg.GithubGraphqlID,
		arg.Login,
		arg.Name,
		arg.Email,
		arg.AvatarUrl,
		arg.Company,
		arg.Location,
		arg.Bio,
		arg.Blog,
		arg.Hireable,
		arg.TwitterUsername,
		arg.Followers,
		arg.Following,
		arg.Type,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var internal_id int32
	err := row.Scan(&internal_id)
	return internal_id, err
}
