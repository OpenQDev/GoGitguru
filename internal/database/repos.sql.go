// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: repos.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRepo = `-- name: CreateRepo :one
INSERT INTO repos (id, created_at, updated_at, organization, repository, url)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, organization, repository, url
`

type CreateRepoParams struct {
	ID           uuid.UUID `json:"id"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
	Organization string    `json:"organization"`
	Repository   string    `json:"repository"`
	Url          string    `json:"url"`
}

func (q *Queries) CreateRepo(ctx context.Context, arg CreateRepoParams) (Repo, error) {
	row := q.queryRow(ctx, q.createRepoStmt, createRepo,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Organization,
		arg.Repository,
		arg.Url,
	)
	var i Repo
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Organization,
		&i.Repository,
		&i.Url,
	)
	return i, err
}

const getRepos = `-- name: GetRepos :many
SELECT id, created_at, updated_at, organization, repository, url FROM repos
`

func (q *Queries) GetRepos(ctx context.Context) ([]Repo, error) {
	rows, err := q.query(ctx, q.getReposStmt, getRepos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Repo
	for rows.Next() {
		var i Repo
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Organization,
			&i.Repository,
			&i.Url,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
