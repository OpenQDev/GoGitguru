// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0

package database

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.getRepoURLStmt, err = db.PrepareContext(ctx, getRepoURL); err != nil {
		return nil, fmt.Errorf("error preparing query GetRepoURL: %w", err)
	}
	if q.getRepoURLsStmt, err = db.PrepareContext(ctx, getRepoURLs); err != nil {
		return nil, fmt.Errorf("error preparing query GetRepoURLs: %w", err)
	}
	if q.insertRepoURLStmt, err = db.PrepareContext(ctx, insertRepoURL); err != nil {
		return nil, fmt.Errorf("error preparing query InsertRepoURL: %w", err)
	}
	if q.updateStatusStmt, err = db.PrepareContext(ctx, updateStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateStatus: %w", err)
	}
	if q.updateStatusAndUpdatedAtStmt, err = db.PrepareContext(ctx, updateStatusAndUpdatedAt); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateStatusAndUpdatedAt: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.getRepoURLStmt != nil {
		if cerr := q.getRepoURLStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRepoURLStmt: %w", cerr)
		}
	}
	if q.getRepoURLsStmt != nil {
		if cerr := q.getRepoURLsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRepoURLsStmt: %w", cerr)
		}
	}
	if q.insertRepoURLStmt != nil {
		if cerr := q.insertRepoURLStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertRepoURLStmt: %w", cerr)
		}
	}
	if q.updateStatusStmt != nil {
		if cerr := q.updateStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateStatusStmt: %w", cerr)
		}
	}
	if q.updateStatusAndUpdatedAtStmt != nil {
		if cerr := q.updateStatusAndUpdatedAtStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateStatusAndUpdatedAtStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                           DBTX
	tx                           *sql.Tx
	getRepoURLStmt               *sql.Stmt
	getRepoURLsStmt              *sql.Stmt
	insertRepoURLStmt            *sql.Stmt
	updateStatusStmt             *sql.Stmt
	updateStatusAndUpdatedAtStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                           tx,
		tx:                           tx,
		getRepoURLStmt:               q.getRepoURLStmt,
		getRepoURLsStmt:              q.getRepoURLsStmt,
		insertRepoURLStmt:            q.insertRepoURLStmt,
		updateStatusStmt:             q.updateStatusStmt,
		updateStatusAndUpdatedAtStmt: q.updateStatusAndUpdatedAtStmt,
	}
}
